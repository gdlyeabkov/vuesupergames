c#
модификатор internal (Доступ ограничен текущей сборкой.)
класс base (термин «базовый класс» используется вместо термина «суперкласс»)(Базовый класс — это класс, не имеющий суперкласса, и поэтому находится в основании дерева подклассов. Большинство объектно-ориентированных систем программирования обеспечивает библиотеку классов, на основании которых разработчик создает свои собственные. Эти библиотеки зачастую предлагают один или довольно ограниченный набор базовых классов, которые составляют основу библиотеки.)
-----------------
yield return <expression>;
yield break;
Использование в операторе контекстного ключевого слова yield означает, что метод, оператор или метод доступа get, в котором присутствует это ключевое слово, является итератором.
---------------
partial тип у элементов для разделения на несколько файлов
partial class A{}
-----------------
структуры

public struct PostalAddress
{
    // Fields, properties, methods and events go here...
}

В объявлении структуры поля не могут быть инициализированы до тех пор, пока они будут объявлены как const или static.
Структура не может объявлять используемый по умолчанию конструктор (конструктор без параметров) или метод завершения.
Структуры копируются при присваивании. При присваивании структуры к новой переменной выполняется копирование всех данных, а любое изменение новой копии не влияет на данные в исходной копии. Это важно помнить при работе с коллекциями типов значений, такими как Dictionary<string, myStruct>.
Структуры являются типами значений, а классы — ссылочными типами.
В отличие от классов структуры можно создавать без использования оператора new.
Структуры могут объявлять конструкторы, имеющие параметры.
Структура не может наследовать от другой структуры или класса и не может быть базовой для класса. Все структуры наследуют непосредственно от ValueType, который наследует от Object.
Структуры могут реализовывать интерфейсы.
Структура не может быть null, а переменная структуры не может быть назначена null, если переменная не объявлена как тип, допускающий значение null.
----------------
Методы завершения (также называемые деструкторами) используются для любой необходимой окончательной очистки, когда сборщик мусора окончательно удаляет экземпляра класса.
Примечания
В структурах определение методов завершения невозможно. Они применяются только в классах.
Каждый класс может иметь только один метод завершения.
Методы завершения не могут быть унаследованы или перегружены.
Методы завершения невозможно вызвать. Они запускаются автоматически.
Метод завершения не принимает модификаторов и не имеет параметров.